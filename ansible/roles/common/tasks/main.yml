- name: Create customary directories
  file:
    dest: "{{ home }}/{{ item }}"
    state: directory
  with_items:
    - .config
    - .config/nvim
    - .config/pip
    - .config/bin
    - .ssh
    - bin
    - opt
    - dev
    - projects
    - tmp

- name: configure pacman
  when: ansible_facts['os_family'] == "Archlinux"
  become: yes
  copy:
    src: pacman.conf
    dest: /etc/pacman.conf
    user: root
    group: root
    mode: 0644
  tags: [justme]

- name: Prepare pacman installs
  when: ansible_facts['os_family'] == "Archlinux"
  become: yes
  pacman:
    update_cache: yes
    upgrade: yes

- name: Prepare apt installs
  when: ansible_facts['os_family'] == "Debian"
  become: yes
  apt:
    name: aptitude
    state: latest
    update_cache: yes
    autoclean: yes
    autoremove: yes

- name: Install git
  when: ansible_facts['os_family'] == "Archlinux"
  become: yes
  pacman:
    name: git
    state: latest

- name: Install git
  when: ansible_facts['os_family'] == "Debian"
  become: yes
  apt:
    name: git
    state: latest

- name: Clone dotfiles
  when: not local_run
  ansible.builtin.git:
    repo: "{{ 'git@github.com:nathanalderson/dotfiles.git' if has_private_key else 'https://github.com/nathanalderson/dotfiles' }}"
    dest: dotfiles
    accept_hostkey: yes
    update: yes

- name: Install dotfiles
  file:
    src: "dotfiles/{{ item }}"
    dest: "{{ home }}/{{ item }}"
    state: link
    force: yes
  with_items:
    - .bashrc
    - .gitconfig
    - .gitignore_global
    - .ideavimrc
    - .profile
    - .tmux.conf
    - .vimrc
    - .vim
    - .zshrc
    - .zprofile
    - .zshenv

- name: Install templated configs
  template:
    src: "{{ dotfiles_local }}/{{ item.src }}"
    dest: "{{ home }}/{{ item.dest }}"
  with_items:
    - src: ssh-config.j2
      dest: .ssh/config
    - src: .zshenv.j2
      dest: .zshenv
    - src: .zshrc-local.j2
      dest: .zshrc-local

- name: Add keepassxc PPA
  when: ansible_facts['os_family'] == "Debian"
  become: yes
  apt_repository:
    repo: ppa:phoerious/keepassxc
    update_cache: yes

- name: Add nextcloud PPA
  when: ansible_facts['os_family'] == "Debian"
  become: yes
  apt_repository:
    repo: ppa:nextcloud-devs/client
    update_cache: yes

- name: Install pacman packages
  when: ansible_facts['os_family'] == "Archlinux"
  become: yes
  pacman:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
    - ca-certificates
    - base-devel
    - cowsay
    - cups
    - curl
    - expect
    - firefox
    - gnome-terminal
    - gnupg
    - htop
    - keepassxc
    - lightdm
    - lightdm-slick-greeter
    - lsb-release
    - neovim
    - openssh
    - python-jedi
    - python-pip
    - python-pynvim
    - python-wheel
    - python-virtualenv
    - resolvconf
    - rsync
    - shellcheck
    - sshpass
    - system-config-printer
    - tmux
    - tree
    - udisks2
    - unzip
    - wget
    - wmctrl
    - xarchiver
    - xclip
    - xorg-xauth
    - xsel
    - zip
    - zsh

- name: Install apt packages
  when: ansible_facts['os_family'] == "Debian"
  become: yes
  apt:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
    - apt-transport-https
    - ca-certificates
    - build-essential
    - cowsay
    - curl
    - expect
    - gconf2
    - gnupg
    - htop
    - keepassxc
    - lsb-release
    - neovim
    - nextcloud-desktop
    - python3-dev
    - python3-jedi
    - python3-pip
    - python3-wheel
    - python3-venv
    - resolvconf
    - shellcheck
    - sshpass
    - tmux
    - tree
    - xclip
    - xorg-xdpyinfo
    - xsel
    - zsh

- name: Locate .config files
  shell: "cd {{ home }}/dotfiles && find .config -type f"
  register: dotconfig_files

- name: Create directories for .config files
  file:
    dest: "{{ home }}/{{ item | dirname }}"
    state: directory
  with_items: "{{ dotconfig_files.stdout_lines }}"

- name: Symlink .config files
  file:
    src: "{{ home }}/dotfiles/{{ item }}"
    dest: "{{ home }}/{{ item }}"
    state: link
    force: yes
  with_items: "{{ dotconfig_files.stdout_lines }}"

- name: Install python packages (local)
  # This one has problems using a local connection because you end up still
  # in the virtualenv being used to run the playbook.
  when: ansible_connection != 'local'
  pip:
    name: "{{ packages }}"
    executable: pip3
    extra_args: --user
    state: present
  vars:
    packages:
      - black
      - esbonio
      - mypy
      - neovim
      - poetry
      - pycodestyle
      - pylama
      - pylint
      - virtualenv

- name: Remove apt packages
  when: ansible_facts['os_family'] == "Debian"
  become: yes
  apt:
    name: "{{ packages }}"
    state: absent
    autoclean: yes
    autoremove: yes
  vars:
    packages:
      - elixir
      - evolution
      - krita
      - thunderbird

- name: Locate bin files
  find:
    paths: "{{ home }}/dotfiles/bin"
  register: bin_files

- name: Install bin files
  file:
    src: "{{ item.path }}"
    dest: "{{ home }}/bin/{{ item.path | basename }}"
    state: link
    force: yes
  with_items: "{{ bin_files.files }}"

- name: Install zinit (for zsh)
  ansible.builtin.git:
    repo: https://github.com/zdharma-continuum/zinit.git
    dest: "{{ home }}/.local/share/zinit/zinit.git"

- name: Initialize zinit
  command:
    cmd: /usr/bin/zsh
    creates: "{{ home }}/.zinit/completions"

- name: Set shell to zsh
  # for an Active Directory user, you can't set the
  # shell (have to request IT to update it in AD)
  when: not "@corp" in user
  become: yes
  user:
    name: "{{ ansible_env.USER }}"
    shell: /usr/bin/zsh

- name: Set default editor
  when: ansible_facts['os_family'] == "Debian"
  become: yes
  community.general.alternatives:
    name: editor
    path: /usr/bin/nvim

- name: Setup neovim config
  file:
    src: "{{ home }}/dotfiles/.vimrc"
    dest: "{{ home }}/.config/nvim/init.vim"
    state: link
    force: yes

- name: Install neovim plugins
  command:
    cmd: nvim +PlugInstall +UpdateRemotePlugins +qall
    creates: "{{ home }}/.config/nvim/bundle"

- name: Setup desktop environment
  when: ansible_facts['os_family'] == "Debian"
  block:
    - name: Install cinnamon
      become: yes
      apt:
        name: cinnamon-desktop-environment xviewer xreader
        state: latest
    # TODO somehow set cinnamon as default

- name: Setup Cinnamon
  when: ansible_facts['os_family'] == "Archlinux"
  block:
    - name: Install cinnamon
      become: yes
      pacman:
        name: cinnamon
        state: latest

- name: Create folder for X11 conf files
  become: yes
  file:
    dest: /etc/X11/xorg.conf.d/
    state: directory

- name: Set xorg options
  become: yes
  copy:
    src: "{{ dotfiles_local }}/xorg.conf.d/"
    dest: /etc/X11/xorg.conf.d/
    force: yes

- name: Network turbo-button
  become: yes
  ansible.posix.sysctl:
    name: net.core.default_qdisc
    value: cake

- name: Network turbo-button part 2
  become: yes
  ansible.posix.sysctl:
    name: net.ipv4.tcp_congestion_control
    value: bbr

- name: Create a user for managing AURs
  become: yes
  user:
    name: aur_builder
    create_home: yes
    group: wheel

- name: Allow aur_builder to run `sudo pacman` without a password
  become: yes
  lineinfile:
     path: /etc/sudoers.d/11-install-aur_builder
     state: present
     line: "aur_builder ALL=(ALL) NOPASSWD: /usr/bin/pacman"
     validate: /usr/sbin/visudo -cf %s
     create: yes

- name: Install gnome-keyring and associated tools
  become: yes
  pacman:
    name: "{{ item }}"
    state: present
  with_items:
    - gnome-keyring
    - libsecret
    - seahorse

- name: Enable SSH
  become: yes
  systemd:
    name: "sshd"
    state: started
    enabled: yes

- name: Configure lightdm to use slick-greeter
  become: yes
  lineinfile:
     path: /etc/lightdm/lightdm.conf
     state: present
     insertafter: '^\[Seat:\*\]'
     line: "greeter-session=lightdm-slick-greeter"
     create: yes

- name: enable lightdm
  become: yes
  systemd:
    name: "lightdm"
    enabled: yes

- name: configure slick greeter
  become: yes
  copy:
    src: "{{ item }}"
    dest: /etc/lightdm/
  with_items:
    - slick-greeter.conf
    - slick-greeter-background.jpg

- name: Tell lightdm to source .zshenv
  copy:
    dest: "{{ home }}/.xprofile"
    content: |
      #!/bin/sh
      [[ -f ~/.zshenv ]] && source ~/.zshenv

- name: Configure SSH Daemon
  become: yes
  lineinfile:
    path: /etc/ssh/sshd_config
    line: "{{ item.key }} {{ item.value }}"
    regexp: '^#?{{ item.key }}'
  with_items:
    - key: X11Forwarding
      value: "yes"
    - key: X11DisplayOffset
      value: 10
    - key: X11UseLocalhost
      value: "yes"
    - key: AllowAgentForwarding
      value: "yes"
    - key: AllowTcpForwarding
      value: "yes"
    - key: PasswordAuthentication
      value: "yes"
  register: ssh_config

- name: Restart SSHD
  when: ssh_config.changed
  become: yes
  systemd:
    name: sshd
    state: restarted

- name: Add user to some groups
  become: yes
  user:
    name: "{{ user }}"
    groups: [wheel, sudo, storage]
    append: yes
