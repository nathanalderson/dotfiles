- name: Create customary directories
  file:
    dest: "{{ home }}/{{ item }}"
    state: directory
  with_items:
    - .config
    - .config/nvim
    - .config/pip
    - .ssh
    - bin
    - opt
    - dev
    - projects

- name: Prepare apt installs
  when: ansible_facts['os_family'] == "Debian"
  become: yes
  apt:
    name: aptitude
    state: latest
    update_cache: yes
    autoclean: yes
    autoremove: yes

- name: Install git
  when: ansible_facts['os_family'] == "Debian"
  become: yes
  apt:
    name: git
    state: latest

- name: Clone dotfiles
  when: not local_run
  ansible.builtin.git:
    repo: "{{ 'git@github.com:nathanalderson/dotfiles.git' if has_private_key else 'https://github.com/nathanalderson/dotfiles' }}"
    dest: dotfiles
    accept_hostkey: yes
    update: yes

- name: Install dotfiles
  file:
    src: "dotfiles/{{ item }}"
    dest: "{{ home }}/{{ item }}"
    state: link
    force: yes
  with_items:
    - .bashrc
    - .gitconfig
    - .gitignore_global
    - .ideavimrc
    - .tmux.conf
    - .vimrc
    - .vim
    - .zshrc

- name: Install templated configs
  template:
    src: "{{ dotfiles_local }}/{{ item.src }}"
    dest: "{{ home }}/{{ item.dest }}"
  with_items:
    - src: ssh-config.j2
      dest: .ssh/config
    - src: .zshenv.j2
      dest: .zshenv
    - src: .zshrc-local.j2
      dest: .zshrc-local

- name: Add keepassxc PPA
  when: ansible_facts['os_family'] == "Debian"
  become: yes
  apt_repository:
    repo: ppa:phoerious/keepassxc
    update_cache: yes

- name: Add nextcloud PPA
  when: ansible_facts['os_family'] == "Debian"
  become: yes
  apt_repository:
    repo: ppa:nextcloud-devs/client
    update_cache: yes

- name: Install apt packages
  when: ansible_facts['os_family'] == "Debian"
  become: yes
  apt:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
    - apt-transport-https
    - ca-certificates
    - build-essential
    - cowsay
    - curl
    - expect
    - gconf2
    - gnupg
    - htop
    - keepassxc
    - lsb-release
    - neovim
    - nextcloud-desktop
    - python3-dev
    - python3-jedi
    - python3-pip
    - python3-wheel
    - python3-venv
    - resolvconf
    - shellcheck
    - sshpass
    - tmux
    - tree
    - xclip
    - xsel
    - zsh

- name: Install python packages (local)
  # This one has problems using a local connection because you end up still
  # in the virtualenv being used to run the playbook.
  when: ansible_connection != 'local'
  pip:
    name: "{{ packages }}"
    executable: pip3
    extra_args: --user
    state: present
  vars:
    packages:
      - black
      - mypy
      - neovim
      - poetry
      - pycodestyle
      - pylama
      - pylint
      - virtualenv

- name: Remove apt packages
  when: ansible_facts['os_family'] == "Debian"
  become: yes
  apt:
    name: "{{ packages }}"
    state: absent
    autoclean: yes
    autoremove: yes
  vars:
    packages:
      - elixir
      - evolution
      - krita
      - thunderbird

- name: Locate bin files
  find:
    paths: "{{ home }}/dotfiles/bin"
  register: bin_files

- name: Install bin files
  file:
    src: "{{ item.path }}"
    dest: "{{ home }}/bin/{{ item.path | basename }}"
    state: link
    force: yes
  with_items: "{{ bin_files.files }}"

- name: Install zinit (for zsh)
  ansible.builtin.git:
    repo: https://github.com/zdharma/zinit.git
    dest: "{{ home }}/.zinit/bin"

- name: Initialize zinit
  command:
    cmd: /usr/bin/zsh
    creates: "{{ home }}/.zinit/completions"

- name: Set shell to zsh
  # for an Active Directory user, you can't set the
  # shell (have to request IT to update it in AD)
  when: not "@corp" in user
  become: yes
  user:
    name: "{{ ansible_env.USER }}"
    shell: /usr/bin/zsh

- name: Set default editor
  when: ansible_facts['os_family'] == "Debian"
  become: yes
  community.general.alternatives:
    name: editor
    path: /usr/bin/nvim

- name: Setup neovim config
  file:
    src: "{{ home }}/dotfiles/.vimrc"
    dest: "{{ home }}/.config/nvim/init.vim"
    state: link
    force: yes

- name: Install neovim plugins
  command:
    cmd: nvim +PlugInstall +UpdateRemotePlugins +qall
    creates: "{{ home }}/.config/nvim/bundle"

- name: Setup desktop environment
  when: ansible_facts['os_family'] == "Debian"
  block:
    - name: Install cinnamon
      become: yes
      apt:
        name: cinnamon-desktop-environment
        state: latest
    # TODO somehow set cinnamon as default

- name: Create folder for X11 conf files
  become: yes
  file:
    dest: /etc/X11/xorg.conf.d/
    state: directory

- name: Enable right-click-drag scrolling
  become: yes
  copy:
    src: "{{ dotfiles_local }}/xorg.conf.d/"
    dest: /etc/X11/xorg.conf.d/
    force: yes

- name: Network turbo-button
  become: yes
  ansible.posix.sysctl:
    name: net.core.default_qdisc
    value: cake

- name: Network turbo-button part 2
  become: yes
  ansible.posix.sysctl:
    name: net.ipv4.tcp_congestion_control
    value: bbr

- name: Add home directory to apparmor
  when: "'adtran' in ansible_role_names and ansible_facts['apparmor']['status'] == 'enabled'"
  become: yes
  copy:
    dest: "/etc/apparmor.d/tunables/home.d/adtran"
    content: "@{HOMEDIRS}+={{ home | dirname }}"
