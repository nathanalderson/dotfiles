// Place your key bindings in this file to override the defaults
[
    // ===================================================
    // Remove neovim bindings that remap ctrl-c (cuz that should copy)
    {
        "key": "ctrl+c",
        "command": "-vscode-neovim.escape",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+c",
        "command": "-vscode-neovim.escape",
        "when": "editorTextFocus && neovim.ctrlKeysInsert && neovim.init && neovim.mode == 'insert'"
    },
    // ===================================================
    // Remove neovim bindings for <C-W>o which conflicts with ZoomWin
    {
        "command": "-workbench.action.joinAllGroups",
        "key": "ctrl+w o"
    },
    // ===================================================
    // Simulate NERDTree
    {
        "key": "ctrl+n",
        "command": "-workbench.action.files.newUntitledFile"
    },
    {
        "key": "ctrl+n",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "!suggestWidgetVisible && !inQuickOpen"
    },
    {
        "key": "ctrl+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    // ===================================================
    // Toggle panel visibility
    {
        "key": "ctrl+m",
        "command": "workbench.action.togglePanel"
    },
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    // ===================================================
    // Ctrl+6 to switch tabs
    {
        "key": "ctrl+6",
        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
    },
    // ===================================================
    // window navigation and manaagement
    {
        "key": "ctrl+h",
        "command": "workbench.action.navigateLeft"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.navigateRight"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.navigateUp"
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.navigateDown"
    },
    {
        "key": "\\ w",
        "command": "workbench.action.splitEditor",
        "when": "editorTextFocus && neovim.mode == normal"
    },
    // ===================================================
    // Focus the terminal
    {
        "key": "ctrl+shift+.",
        "command": "workbench.action.terminal.toggleTerminal"
    },
    // ===================================================
    // navigate terminals
    {
        "key": "ctrl+shift+k",
        "command": "workbench.action.terminal.focusPrevious",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "ctrl+shift+j",
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "ctrl+t",
        "command": "workbench.action.terminal.new",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    // ===================================================
    // ctrl n(next) and p(previous) already works, just adding jk as a personal preference
    {
        "key": "ctrl+j",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+j",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+k",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+j",
        "when": "codeActionMenuVisible",
        "command": "selectNextCodeAction"
    },
    {
        "key": "ctrl+k",
        "when": "codeActionMenuVisible",
        "command": "selectPrevCodeAction"
    },
    // ===================================================
    // Testing
    {
        "key": "ctrl+; ;",
        "command": "exunit.runTest", // test under cursor
        "when": "editorTextFocus && resourceLangId == elixir"
    },
    {
        "key": "ctrl+; ;",
        "command": "testing.runAtCursor",
        "when": "editorTextFocus && resourceLangId != elixir"
    },
    {
        "key": "ctrl+; .",
        "command": "exunit.runPrevious",
        "when": "resourceLangId == elixir"
    },
    {
        "key": "ctrl+; .",
        "command": "testing.reRunLastRun",
        "when": "resourceLangId != elixir"
    },
    {
        "key": "ctrl+; g",
        "command": "exunit.runTestFile",
        "when": "editorFocus && resourceLangId == elixir"
    },
    {
        "key": "ctrl+; g",
        "command": "testing.runCurrentFile",
        "when": "editorFocus && resourceLangId != elixir"
    },
    // Zoomwin
    {
        "key": "\\ z",
        "command": "workbench.action.toggleZenMode",
        "when": "editorTextFocus && neovim.mode == normal"
    },
    // Back and forward
    {
        "key": "alt+left",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "alt+right",
        "command": "workbench.action.navigateForward"
    },
    // Don't close the workbench when I accidentally hit ctrl+q
    {
        "key": "ctrl+q",
        "command": "-workbench.action.quit"
    },
    // Use ctrl+shift+n to highlight the file in the explorer
    {
        "key": "ctrl+shift+n",
        "command": "-workbench.action.newWindow"
    },
    {
        "key": "ctrl+shift+n",
        "command": "workbench.files.action.showActiveFileInExplorer"
    },
    // Pass Ctrl-q to neovim
    {
        "command": "vscode-neovim.send",
        "key": "ctrl+q",
        "when": "editorTextFocus && neovim.mode == normal",
        "args": "<C-q>"
    },
    // Pass Ctrl-s to neovim in insert mode
    {
        "command": "vscode-neovim.send",
        "key": "ctrl+s",
        "when": "editorTextFocus && neovim.mode == insert",
        "args": "<C-s>"
    },
    // Pass Ctrl-y chords to neovim (for emmet-vim)
    {
        "command": "vscode-neovim.send",
        "key": "ctrl+y ;",
        "when": "editorTextFocus",
        "args": "<C-y>;"
    },
    {
        "command": "vscode-neovim.send",
        "key": "ctrl+y u",
        "when": "editorTextFocus",
        "args": "<C-y>u"
    },
    {
        "command": "vscode-neovim.send",
        "key": "ctrl+y m",
        "when": "editorTextFocus",
        "args": "<C-y>m"
    },
    {
        "command": "vscode-neovim.send",
        "key": "ctrl+y k",
        "when": "editorTextFocus",
        "args": "<C-y>k"
    },
    {
        "command": "vscode-neovim.send",
        "key": "ctrl+y j",
        "when": "editorTextFocus",
        "args": "<C-y>j"
    },
    {
        "command": "vscode-neovim.send",
        "key": "ctrl+y /",
        "when": "editorTextFocus",
        "args": "<C-y>/"
    },
    // Hunk revert
    {
        "key": "\\ h",
        "command": "git.revertSelectedRanges",
        "when": "editorTextFocus && neovim.mode == normal"
    },
    {
        "key": "ctrl+; d",
        "command": "testing.debugAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+; ctrl+c",
        "command": "-testing.debugAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+' i",
        "command": "inlineChat.start",
        "when": "inlineChatHasProvider && !editorReadonly"
    },
    {
        "key": "ctrl+k i",
        "command": "-inlineChat.start",
        "when": "inlineChatHasProvider && !editorReadonly"
    },
    {
        "key": "ctrl+escape",
        "command": "-workbench.action.focusActiveEditorGroup",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+escape",
        "command": "vscode-neovim.restart"
    },
    {
        "key": "ctrl+y ,",
        "command": "editor.emmet.action.expandAbbreviation",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
        "key": "tab",
        "command": "-editor.emmet.action.expandAbbreviation",
        "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
        "key": "ctrl+l",
        "command": "-vscode-augment.focusAugmentPanel"
    },
    {
        "key": "ctrl+shift+alt+i",
        "command": "vscode-augment.code-instruction.change",
        "when": "vscode-augment.code-instruction.active && !vscode-augment.internal-new-instructions.enabled && resourceScheme == 'augment.code-instruction'"
    },
    {
        "key": "ctrl+shift+i",
        "command": "-vscode-augment.code-instruction.change",
        "when": "vscode-augment.code-instruction.active && !vscode-augment.internal-new-instructions.enabled && resourceScheme == 'augment.code-instruction'"
    },
    {
        "key": "ctrl+shift+alt+i",
        "command": "vscode-augment.code-instruction.start",
        "when": "!editorReadonly"
    },
    {
        "key": "ctrl+shift+i",
        "command": "-vscode-augment.code-instruction.start",
        "when": "!editorReadonly"
    },
    {
        "key": "ctrl+]",
        "command": "vscode-augment.next-edit.background.goto-hinting",
        "when": "vscode-augment.enableNextEdit && vscode-augment.nextEdit.canGotoHinting && vscode-augment.nextEdit.enableGotoHinting"
    },
    {
        "key": "ctrl+;",
        "command": "-vscode-augment.next-edit.background.goto-hinting",
        "when": "vscode-augment.enableNextEdit && vscode-augment.nextEdit.canGotoHinting && vscode-augment.nextEdit.enableGotoHinting"
    },
    {
        "key": "ctrl+]",
        "command": "vscode-augment.next-edit.background.next",
        "when": "vscode-augment.enableNextEdit && vscode-augment.nextEdit.canNext && !vscode-augment.nextEdit.enableGotoHinting"
    },
    {
        "key": "ctrl+;",
        "command": "-vscode-augment.next-edit.background.next",
        "when": "vscode-augment.enableNextEdit && vscode-augment.nextEdit.canNext && !vscode-augment.nextEdit.enableGotoHinting"
    },
    {
        "key": "ctrl+shift+]",
        "command": "vscode-augment.next-edit.background.previous",
        "when": "vscode-augment.enableNextEdit && vscode-augment.nextEdit.canPrevious && !vscode-augment.nextEdit.enableGotoHinting"
    },
    {
        "key": "ctrl+shift+;",
        "command": "-vscode-augment.next-edit.background.previous",
        "when": "vscode-augment.enableNextEdit && vscode-augment.nextEdit.canPrevious && !vscode-augment.nextEdit.enableGotoHinting"
    },
    {
        "key": "ctrl+alt+]",
        "command": "vscode-augment.next-edit.force",
        "when": "editorHoverFocused && vscode-augment.enableNextEdit || editorTextFocus && vscode-augment.enableNextEdit || vscode-augment.enableNextEdit && activePanel == 'workbench.view.extension.augment-panel' || vscode-augment.enableNextEdit && activeViewlet == 'workbench.view.extension.augment-panel'"
    },
    {
        "key": "ctrl+alt+;",
        "command": "-vscode-augment.next-edit.force",
        "when": "editorHoverFocused && vscode-augment.enableNextEdit || editorTextFocus && vscode-augment.enableNextEdit || vscode-augment.enableNextEdit && activePanel == 'workbench.view.extension.augment-panel' || vscode-augment.enableNextEdit && activeViewlet == 'workbench.view.extension.augment-panel'"
    },
    {
        "key": "ctrl+shift+a",
        "command": "workbench.view.extension.augment-chat"
    },
    {
        "key": "ctrl+shift+/",
        "command": "editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+a",
        "command": "-editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+t",
        "command": "workbench.action.terminal.newLocal",
        "when": "terminalFocus"
    }
]