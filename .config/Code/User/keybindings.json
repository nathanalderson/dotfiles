// Place your key bindings in this file to override the defaults
[
    // ===================================================
    // Neovim `jk` escape
    {
        "command": "vscode-neovim.compositeEscape1",
        "key": "j",
        "when": "neovim.mode == insert && editorTextFocus",
        "args": "j"
    },
    {
        "command": "vscode-neovim.compositeEscape2",
        "key": "k",
        "when": "neovim.mode == insert && editorTextFocus",
        "args": "k"
    },
    // ===================================================
    // Remove neovim bindings that remap cmd-c (cuz that should copy)
    {
        "key": "cmd+c",
        "command": "-vscode-neovim.escape",
        "when": "editorTextFocus && neovim.cmdKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "cmd+c",
        "command": "-vscode-neovim.escape",
        "when": "editorTextFocus && neovim.cmdKeysInsert && neovim.init && neovim.mode == 'insert'"
    },
    // ===================================================
    // Remove neovim bindings for <C-W>o which conflicts with ZoomWin
    {
        "command": "-workbench.action.joinAllGroups",
        "key": "cmd+w o"
    },
    // ===================================================
    // Simulate NERDTree
    {
        "key": "cmd+n",
        "command": "-workbench.action.files.newUntitledFile"
    },
    {
        "key": "cmd+n",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "!suggestWidgetVisible && !inQuickOpen"
    },
    {
        "key": "cmd+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    // ===================================================
    // Toggle panel visibility
    {
        "key": "cmd+m",
        "command": "workbench.action.togglePanel"
    },
    {
        "key": "cmd+j",
        "command": "-workbench.action.togglePanel"
    },
    // ===================================================
    // cmd+6 to switch tabs
    {
        "key": "cmd+6",
        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
    },
    // ===================================================
    // window navigation and manaagement
    {
        "key": "cmd+h",
        "command": "workbench.action.navigateLeft"
    },
    {
        "key": "cmd+l",
        "command": "workbench.action.navigateRight"
    },
    {
        "key": "cmd+k",
        "command": "workbench.action.navigateUp"
    },
    {
        "key": "cmd+j",
        "command": "workbench.action.navigateDown"
    },
    {
        "key": "\\ w",
        "command": "workbench.action.splitEditor",
        "when": "editorTextFocus && neovim.mode == normal"
    },
    // ===================================================
    // Focus the terminal
    {
        "key": "cmd+shift+.",
        "command": "workbench.action.terminal.toggleTerminal"
    },
    // ===================================================
    // navigate terminals
    {
        "key": "cmd+shift+k",
        "command": "workbench.action.terminal.focusPrevious",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "cmd+shift+j",
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "cmd+t",
        "command": "workbench.action.terminal.new",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    // ===================================================
    // cmd n(next) and p(previous) already works, just adding jk as a personal preference
    {
        "key": "cmd+j",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "cmd+k",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    {
        "key": "cmd+j",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "cmd+k",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+j",
        "when": "codeActionMenuVisible",
        "command": "selectNextCodeAction"
    },
    {
        "key": "ctrl+k",
        "when": "codeActionMenuVisible",
        "command": "selectPrevCodeAction"
    },
    // ===================================================
    // Testing
    {
        "key": "cmd+; ;",
        "command": "exunit.runTest", // test under cursor
        "when": "editorTextFocus && resourceLangId == elixir"
    },
    {
        "key": "cmd+; ;",
        "command": "testing.runAtCursor",
        "when": "editorTextFocus && resourceLangId != elixir"
    },
    {
        "key": "cmd+; .",
        "command": "exunit.runPrevious",
        "when": "resourceLangId == elixir"
    },
    {
        "key": "cmd+; .",
        "command": "testing.reRunLastRun",
        "when": "resourceLangId != elixir"
    },
    {
        "key": "cmd+; g",
        "command": "exunit.runTestFile",
        "when": "editorFocus && resourceLangId == elixir"
    },
    {
        "key": "cmd+; g",
        "command": "testing.runCurrentFile",
        "when": "editorFocus && resourceLangId != elixir"
    },
    // Zoomwin
    {
        "key": "\\ z",
        "command": "workbench.action.toggleZenMode",
        "when": "editorTextFocus && neovim.mode == normal"
    },
    // Back and forward
    {
        "key": "alt+left",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "alt+right",
        "command": "workbench.action.navigateForward"
    },
    // Don't close the workbench when I accidentally hit cmd+q
    {
        "key": "cmd+q",
        "command": "-workbench.action.quit"
    },
    // Use cmd+shift+n to highlight the file in the explorer
    {
        "key": "cmd+shift+n",
        "command": "-workbench.action.newWindow"
    },
    {
        "key": "cmd+shift+n",
        "command": "workbench.files.action.showActiveFileInExplorer"
    },
    // Pass cmd-q to neovim
    {
        "command": "vscode-neovim.send",
        "key": "cmd+q",
        "when": "editorTextFocus && neovim.mode == normal",
        "args": "<C-q>"
    },
    // Pass cmd-s to neovim in insert mode
    {
        "command": "vscode-neovim.send",
        "key": "cmd+s",
        "when": "editorTextFocus && neovim.mode == insert",
        "args": "<C-s>"
    },
    // Pass cmd-y chords to neovim (for emmet-vim)
    {
        "command": "vscode-neovim.send",
        "key": "cmd+y ,",
        "when": "editorTextFocus",
        "args": "<C-y>,"
    },
    {
        "command": "vscode-neovim.send",
        "key": "cmd+y ;",
        "when": "editorTextFocus",
        "args": "<C-y>;"
    },
    {
        "command": "vscode-neovim.send",
        "key": "cmd+y u",
        "when": "editorTextFocus",
        "args": "<C-y>u"
    },
    {
        "command": "vscode-neovim.send",
        "key": "cmd+y m",
        "when": "editorTextFocus",
        "args": "<C-y>m"
    },
    {
        "command": "vscode-neovim.send",
        "key": "cmd+y k",
        "when": "editorTextFocus",
        "args": "<C-y>k"
    },
    {
        "command": "vscode-neovim.send",
        "key": "cmd+y j",
        "when": "editorTextFocus",
        "args": "<C-y>j"
    },
    {
        "command": "vscode-neovim.send",
        "key": "cmd+y /",
        "when": "editorTextFocus",
        "args": "<C-y>/"
    },
    // Hunk revert
    {
        "key": "\\ h",
        "command": "git.revertSelectedRanges",
        "when": "editorTextFocus && neovim.mode == normal"
    },
]